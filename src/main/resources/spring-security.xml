<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- <debug /> -->
	
	<!-- 国际化 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- value值表示引用spring-security-core-XXX.jar中的messages_zh_CN.properties文件 -->
		<beans:property name="basename" value="classpath:org/springframework/security/messages_zh_CN" />  
    </beans:bean>  
    <beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"/>
	
	
	<!-- 权限控制的规则 -->
	<http pattern="/css/**" security="none" />
	<http pattern="/fonts/**" security="none" />
	<http pattern="/img/**" security="none" />
	<http pattern="/admin/login.html" security="none" />
	<http pattern="/web/login.html" security="none" />
	<http pattern="/web/index.html" security="none" />
	<http pattern="/web/sendRegisterMsg.*" security="none" />
	<http pattern="/web/register.*" security="none" />
	<http pattern="/wechat/**" security="none" />
	<http pattern="/login_failure.jsp" security="none" />
	<http pattern="/index.jsp" security="none" />

	<http entry-point-ref="loginEntryPoint" use-expressions="true">
		<intercept-url pattern="*/login.html*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<access-denied-handler error-page="/403.jsp" />
		<csrf disabled="true" />
		<session-management>
			<concurrency-control max-sessions="4"
				error-if-maximum-exceeded="true" />
		</session-management>
		
		<!-- 登录过滤器 -->  
        <custom-filter before="FORM_LOGIN_FILTER" ref="webLoginFilter"/>  
        <custom-filter position="FORM_LOGIN_FILTER" ref="adminLoginFilter"/>  
  
        <!-- 注销过滤器 -->  
        <custom-filter before="LOGOUT_FILTER" ref="logoutFilter"/>  
        <custom-filter position="LOGOUT_FILTER" ref="adminLogoutFilter"/> 
		
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</http>
	<!-- 登录过滤器，验证前台用户 -->   
      <beans:bean id="webLoginFilter"      
            class="com.yao.security.WebAuthenticationFilter">  
           <beans:property name="authenticationManager" ref="authenticationManager"/>  
           <beans:property name="authenticationFailureHandler" ref="failureHandler"/>  
           <beans:property name="authenticationSuccessHandler" ref="successHandler"/>  
           <beans:property name="filterProcessesUrl" value="/web/tologin.html"/>  
      </beans:bean>  
  
      <beans:bean id="failureHandler"  
             class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
            <beans:property name="defaultFailureUrl" value="/web/tologin.html?login_error=1" />  
       </beans:bean>  
  
       <beans:bean id="successHandler"  
              class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">  
             <beans:property name="alwaysUseDefaultTargetUrl" value="true"/>  
             <beans:property name="defaultTargetUrl" value="/web/index.html"/>  
       </beans:bean>  
         
       <!-- 登录过滤器，验证后台用户 -->   
       <beans:bean id="adminLoginFilter"  
               class="com.yao.security.AdminAuthenticationFilter">  
               <beans:property name="authenticationManager" ref="authenticationManager"/>  
               <beans:property name="authenticationFailureHandler" ref="adminFailureHandler"/>  
               <beans:property name="authenticationSuccessHandler" ref="adminSuccessHandler"/>  
               <beans:property name="filterProcessesUrl" value="/admin/tologin.html"/>  
        </beans:bean>  
  
        <beans:bean id="adminFailureHandler"   
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
               <beans:property name="defaultFailureUrl" value="/admin/login.html?error=true" />  
        </beans:bean>  
  
        <beans:bean id="adminSuccessHandler"   
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler">  
                <beans:property name="alwaysUseDefaultTargetUrl" value="true"/>  
                <beans:property name="defaultTargetUrl" value="/admin/index.html"/>  
        </beans:bean>  
          
          
    <!-- 注销过滤器，完成前台用户注销时的定向功能 -->  
    <beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">  
        <beans:constructor-arg value="/web/login.html" />  
        <beans:constructor-arg>  
            <beans:list>  
                <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />  
            </beans:list>  
        </beans:constructor-arg>  
        <beans:property name="filterProcessesUrl" value="/j_spring_security_logout" />  
    </beans:bean>  
      
    <!-- 注销过滤器，完成后台用户注销时的定向功能 -->  
    <beans:bean id="adminLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">  
        <beans:constructor-arg value="/admin/login.html" />  
        <beans:constructor-arg>  
            <beans:list>  
                <beans:bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />  
            </beans:list>  
        </beans:constructor-arg>  
        <beans:property name="filterProcessesUrl" value="/j_spring_security_logout" />  
    </beans:bean>  

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter"
		class="com.yao.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 实现未登录用户访问被保护资源时自动跳转到登录页面 -->
	<beans:bean id="loginEntryPoint" class="com.yao.security.LoginEntryPoint"></beans:bean>
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 -->
			 <password-encoder hash="md5" />
		</authentication-provider>
	</authentication-manager>

	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<beans:bean id="myUserDetailService" class="com.yao.security.MyUserDetailService" />

	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManager" class="com.yao.security.MyAccessDecisionManager" />

	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource" class="com.yao.security.MyInvocationSecurityMetadataSource" >
		<beans:constructor-arg>
				<beans:ref bean="roleMenuServiceImpl"/>
		</beans:constructor-arg>
		<beans:constructor-arg>
				<beans:ref bean="rolesServiceImpl"/>
		</beans:constructor-arg>
		<beans:constructor-arg>
				<beans:ref bean="menuServiceImpl"/>
		</beans:constructor-arg>
	</beans:bean>
</beans:beans>